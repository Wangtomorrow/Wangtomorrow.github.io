<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Olicity Forever</title>
  
  <subtitle>菜鸡与代码的日常</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangtomorrow.github.io/"/>
  <updated>2018-09-12T08:16:57.224Z</updated>
  <id>https://wangtomorrow.github.io/</id>
  
  <author>
    <name>Olicity</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring学习记录(一)</title>
    <link href="https://wangtomorrow.github.io/post/61f45dcf.html"/>
    <id>https://wangtomorrow.github.io/post/61f45dcf.html</id>
    <published>2018-09-11T06:45:18.000Z</published>
    <updated>2018-09-12T08:16:57.224Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;最近在做后端的开发，用到了spring，借这个机会给spring捋一遍吧。东西有点多，需要点时间，抽空学。记录(一)主要是写一点spring最基础的东西。<br><a id="more"></a></p><h2 id="一、Spring概述"><a href="#一、Spring概述" class="headerlink" title="一、Spring概述"></a>一、Spring概述</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>&emsp;Spring是一个基于 <strong>控制反转（IOC）</strong> 和 <strong>面向切面（AOP）</strong> 的结构J2EE系统的框架。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<br>&emsp;控制反转(IOC)是一个通用概念，Spring最认同的技术是控制反转的 <strong>依赖注入（DI）</strong> 模式。简单地说就是拿到的对象的属性，已经被注入好相关值了，直接使用即可。<br>&emsp;面向切面编程（AOP），一个程序中跨越多个点的功能被称为横切关注点，这些横切关注点在概念上独立于应用程序的业务逻辑。Spring 框架的 AOP 模块提供了面向方面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。  </p><h3 id="2-Spring关键策略"><a href="#2-Spring关键策略" class="headerlink" title="2.Spring关键策略"></a>2.Spring关键策略</h3><pre><code>* 基于POJO的轻量级和最小侵入性编程* 通过依赖注入和面向接口实现松耦合* 基于切面和惯例进行声明式编程* 通过切面和模板减少样板式代码</code></pre><h3 id="3-Spring优点"><a href="#3-Spring优点" class="headerlink" title="3.Spring优点"></a>3.Spring优点</h3><pre><code>*方便解耦，简化开发 （高内聚低耦合）     Spring就是一个大工厂（容器），可以将所有对象创建和依赖关系维护，交给Spring管理     spring工厂是用于生成bean*AOP编程的支持     Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能    声明式事务的支持     只需要通过配置就可以完成对事务的管理，而无需手动编程*方便程序的测试     Spring对Junit4支持，可以通过注解方便的测试Spring程序*方便集成各种优秀框架     Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz等）的直接支持*降低JavaEE API的使用难度     Spring 对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低</code></pre><h2 id="二、控制反转（IOC）"><a href="#二、控制反转（IOC）" class="headerlink" title="二、控制反转（IOC）"></a>二、控制反转（IOC）</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><p>&emsp;代码之间的 <strong>耦合性</strong> 具有两面性。耦合是必须的，但应小心谨慎的管理。<br>&emsp;DI会将所以来的关系自动交给目标对象，而不是让对象自己去获取依赖。– <strong>松耦合</strong></p><h3 id="2-获取对象的方式进行比较"><a href="#2-获取对象的方式进行比较" class="headerlink" title="2.获取对象的方式进行比较"></a>2.获取对象的方式进行比较</h3><p>传统方式：<br>通过new关键字主动创建一个对象<br>IOC方式：<br>对象的生命周期由Spring来管理，直接从Spring那里去获取一个对象。 IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。</p><h3 id="3-装配"><a href="#3-装配" class="headerlink" title="3.装配"></a>3.装配</h3><p>&emsp;创建应用组件之间协作的行为通常称为装配。常用XML装配方式。Spring配置文件。</p><pre><code class="xml">*使用构造器进行配置    <span class="tag">&lt;<span class="name">bean</span>&gt;</span> 定义JavaBean，配置需要创建的对象    id/name ：用于之后从spring容器获得实例时使用的    class ：需要创建实例的全限定类名    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"c"</span> <span class="attr">class</span>=<span class="string">"pojo.Category"</span>&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"category 1"</span> /&gt;</span> <span class="comment">&lt;!--category对象--&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    <span class="comment">&lt;!--创建product对象的时候注入了一个category对象，使用ref--&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"p"</span> <span class="attr">class</span>=<span class="string">"pojo.Product"</span>&gt;</span> <span class="comment">&lt;!--product类中添加category对象的set&amp;get方法--&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"product1"</span> /&gt;</span>   <span class="comment">&lt;!--product对象--&gt;</span>        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"category"</span> <span class="attr">ref</span>=<span class="string">"c"</span> /&gt;</span>    <span class="comment">&lt;!--为product对象注入category对象--&gt;</span>    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>*使用注解的方式进行配置    xml中添加  <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span> 注释掉注入category        *@Autowired注解方法            在Product.java的category属性前加上@Autowired注解            @Autowired            private Category category;            或者            @Autowired            public void setCategory(Category category)         *@Resource            @Resource(name="c")            private Category category;*对bean进行注解配置    直接xml中添加  <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"pojo"</span>/&gt;</span>    就是告知spring，所有的bean都在pojo包下    通过@Component注解        在类前加入  @Component("c")  表明此类是bean        因为配置从applicationContext.xml中移出来了，所以属性初始化放在属性声明上进行了。        private String name="product 1";        private String name="category 1";        同时@Autowired也需要在Product.java的category属性前加上*Spring javaConfig</code></pre><p><a href="https://github.com/Wangtomorrow/Spring/tree/master/spring" target="_blank" rel="noopener">源码参照</a></p><h2 id="三、面向切面（AOP）"><a href="#三、面向切面（AOP）" class="headerlink" title="三、面向切面（AOP）"></a>三、面向切面（AOP）</h2><pre><code>未完待续。。。先整kafka。。。。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;最近在做后端的开发，用到了spring，借这个机会给spring捋一遍吧。东西有点多，需要点时间，抽空学。记录(一)主要是写一点spring最基础的东西。&lt;br&gt;
    
    </summary>
    
    
      <category term="spring" scheme="https://wangtomorrow.github.io/tags/spring/"/>
    
      <category term="笔记" scheme="https://wangtomorrow.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="IOC" scheme="https://wangtomorrow.github.io/tags/IOC/"/>
    
      <category term="DI" scheme="https://wangtomorrow.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>开始吧</title>
    <link href="https://wangtomorrow.github.io/post/9f79558f.html"/>
    <id>https://wangtomorrow.github.io/post/9f79558f.html</id>
    <published>2018-09-10T10:36:06.000Z</published>
    <updated>2018-09-11T06:08:54.936Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;入职一个月了，暑假的时候来公司做实习生，目前是在做hadoop的运维和别的项目的后端开发以及一些日常琐事的处理。<br><a id="more"></a><br>&emsp;刚来的时候先是学习了hadoop的搭建，当时是搭建的Hadoop2.4版本（有时间学习一下3.0版本的新特性，自己试着搭建一下），再后来搭建了HA，加入了zookeeper。在此基础上，又学习了HDFS的机制与shell操作，yarn资源调度，还有mapreduce的工作机制，包括shuffle，partitioner，combiner等，并写了最基础的wordcount，现在做的也是mapreduce的日常运维与开发。后来又学习了hive表的机制与操作（写了好长一段时间sql语句，发现自己基础真的薄弱）。相关笔记：<a href="https://github.com/Wangtomorrow/Hadoop" target="_blank" rel="noopener">hadoop学习记录</a><br>&emsp;现在也算简单的hadoop入门了，还有公司的环境也是一个比较好的机会吧。这一个月的时间里在学习，熟悉公司业务、框架的过程中，发现了自己存在很大的问题。感觉自己涉猎过很多东西，其实真正用起来的时候发现自己其实真的是啥也会，啥也不会。说白了，还是看的多了，做的少了。<br>&emsp;最近一段时间，在做某项目的后端开发，hadoop的学习先暂告一段落了。就标记一下，hadoop接下来一段时间要学的东西吧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*hadoop3.0新特新及搭建</span><br><span class="line">*linux的操作，各种操作指令</span><br><span class="line">*hive表相关，涉及到sql</span><br><span class="line">*hadoop及HDFS深度学习研究</span><br><span class="line">*pig</span><br><span class="line">*hbase</span><br><span class="line">*redis</span><br><span class="line">*MongoDB</span><br><span class="line">*yarn相关细节</span><br><span class="line">*zookeeper相关细节</span><br><span class="line">*sqoop</span><br><span class="line">*Flume对比DataX</span><br><span class="line">*Spark全家桶</span><br><span class="line">*Storm对比Spark Streaming</span><br><span class="line">*kafka</span><br><span class="line">*JVM虚拟机</span><br><span class="line"></span><br><span class="line">*调度监控管理系统、数据应用等很多东西</span><br><span class="line"></span><br><span class="line">*大数据中涉及到的机器学习，Mahout、Spark MLLib等。</span><br><span class="line">（中文分词、自然语言处理、推荐算法、分类算法、回归算法、聚类算法、神经网络与深度学习）</span><br><span class="line"> 关于机器学习，可以先放一放。数学基础很重要。</span><br><span class="line"></span><br><span class="line">*会涉及到并发、多线程、负载均衡、分布式、云计算等问题。</span><br></pre></td></tr></table></figure></p><p>&emsp;关于大数据目前就想到这么多，很多东西还是得边学边加，实际项目中缺啥补啥吧。<br>&emsp;关于最近所做项目的后端，想了想，最近应该会去多学习kafka以及spring相关，可以借此机会给spring全家桶捣鼓一遍。<br>&emsp;以后大部分代码更新会在<a href="https://github.com/Wangtomorrow" target="_blank" rel="noopener">github</a>上，日常博客更新会在这里，csdn看内容吧，没营养的就不往那边整了。这边估计很少会有人看见吧，哈哈哈~~~<br>&emsp;写这个blog最初的想法，一是就当一个记事本了，记录自己学习上遇到的坑和笔记。二是为了督促和记录自己学习的。开始吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;入职一个月了，暑假的时候来公司做实习生，目前是在做hadoop的运维和别的项目的后端开发以及一些日常琐事的处理。&lt;br&gt;
    
    </summary>
    
    
      <category term="start" scheme="https://wangtomorrow.github.io/tags/start/"/>
    
  </entry>
  
</feed>
